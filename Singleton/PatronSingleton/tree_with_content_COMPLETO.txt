Estructura del directorio: C:\Users\Javier\OneDrive\Documentos\GitHub\Tareas-Patrones---Principios\2_Singleton\PatronSingleton

PatronSingleton
├── .gitignore
├── .idea
│   ├── .gitignore
│   ├── compiler.xml
│   ├── jarRepositories.xml
│   ├── misc.xml
│   ├── modules.xml
├── PatronSingleton.iml
├── config.json
├── exportToHTML
│   ├── ConfigurationLoader.java.html
│   ├── ConfigurationManager.java.html
│   ├── ConnectionSimulator.java.html
│   ├── ConsoleColors.java.html
│   ├── Main.java.html
│   ├── WelcomeScreen.java.html
│   ├── config.json.html
│   ├── index.html
├── pom.xml
├── src
│   ├── ConfigurationLoader.java
│   ├── ConfigurationManager.java
│   ├── ConnectionSimulator.java
│   ├── ConsoleColors.java
│   ├── Main.java
│   ├── WelcomeScreen.java
│   ├── config.json
├── target
│   ├── classes
│   │   ├── config.json

================================================================================
CONTENIDO DE ARCHIVOS
================================================================================

ConfigurationLoader.java:
-------------------------
import java.io.*;
import java.util.HashMap;
import java.util.Map;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * Clase auxiliar para cargar y guardar la configuración desde/hacia un archivo JSON.
 */
public class ConfigurationLoader {
    private static final String CONFIG_FILE = "config.json";
    private static final Map<String, Object> DEFAULT_CONFIG = createDefaultConfig();

    private static Map<String, Object> createDefaultConfig() {
        Map<String, Object> defaultConfig = new HashMap<>();
        defaultConfig.put("defaultCurrency", "CRC");
        defaultConfig.put("timeFormat", "24H");
        defaultConfig.put("maxConnections", 5);
        defaultConfig.put("language", "ES");
        defaultConfig.put("autoSaveInterval", 10);
        defaultConfig.put("enableLogs", true);
        defaultConfig.put("theme", "light");
        defaultConfig.put("region", "LATAM");
        defaultConfig.put("backupEnabled", false);
        defaultConfig.put("backupDirectory", "/backups");
        return defaultConfig;
    }

    /**
     * Carga la configuración desde el archivo JSON.
     * Si el archivo no existe o hay un error, retorna la configuración por defecto.
     */
    public static Map<String, Object> loadConfig() {
        JSONParser parser = new JSONParser();

        try (FileReader reader = new FileReader(CONFIG_FILE)) {
            JSONObject jsonObject = (JSONObject) parser.parse(reader);
            Map<String, Object> config = new HashMap<>();

            // Copiamos todos los valores del JSON al mapa
            for (Object key : jsonObject.keySet()) {
                config.put((String) key, jsonObject.get(key));
            }

            return config;
        } catch (IOException | ParseException e) {
            System.out.println("Error al cargar configuración. Usando valores por defecto.");
            return new HashMap<>(DEFAULT_CONFIG);
        }
    }

    /**
     * Guarda la configuración actual en el archivo JSON.
     */
    public static void saveConfig(Map<String, Object> config) {
        JSONObject jsonObject = new JSONObject();
        jsonObject.putAll(config);

        try (FileWriter file = new FileWriter(CONFIG_FILE)) {
            file.write(jsonObject.toJSONString());
            file.flush();
        } catch (IOException e) {
            System.out.println("Error al guardar configuración: " + e.getMessage());
        }
    }
}

--------------------------------------------------

ConfigurationManager.java:
--------------------------
import java.util.Map;
import java.util.HashMap;

public class ConfigurationManager {
    private static ConfigurationManager instance;
    private Map<String, Object> config;

    private ConfigurationManager() {
        config = ConfigurationLoader.loadConfig();
    }

    public static synchronized ConfigurationManager getInstance() {
        if (instance == null) {
            instance = new ConfigurationManager();
        }
        return instance;
    }

    public Object getConfigValue(String key) {
        return config.get(key);
    }

    public void setConfigValue(String key, Object value) {
        Object oldValue = config.get(key);
        config.put(key, value);
        System.out.printf("[ConfigManager] '%s' actualizado: %s → %s\n", key, oldValue, value);
        ConfigurationLoader.saveConfig(config);
    }

    public Map<String, Object> getAllConfig() {
        return new HashMap<>(config);
    }
}

--------------------------------------------------

ConnectionSimulator.java:
-------------------------
/**
 * Simulador de conexiones que utiliza parámetros de configuración.
 */
public class ConnectionSimulator {
    private final ConfigurationManager configManager;

    public ConnectionSimulator() {
        this.configManager = ConfigurationManager.getInstance();
    }

    public void runSimulation() {
        int maxConnections = ((Number) configManager.getConfigValue("maxConnections")).intValue();
        boolean enableLogs = (boolean) configManager.getConfigValue("enableLogs");
        String defaultCurrency = (String) configManager.getConfigValue("defaultCurrency");

        System.out.println("\n=== SIMULADOR DE CONEXIONES ===");
        System.out.println("Moneda por defecto: " + defaultCurrency);
        System.out.println("Intentando establecer " + maxConnections + " conexiones...\n");

        for (int i = 1; i <= maxConnections; i++) {
            try {
                // Simular tiempo de conexión
                Thread.sleep(500);

                if (enableLogs) {
                    System.out.println("Conexión #" + i + " establecida con éxito.");
                }
            } catch (InterruptedException e) {
                if (enableLogs) {
                    System.out.println("Error en conexión #" + i + ": " + e.getMessage());
                }
            }
        }

        System.out.println("\nSimulación completada. Total de conexiones: " + maxConnections);
        System.out.println("==================================\n");
    }
}

--------------------------------------------------

ConsoleColors.java:
-------------------
public class ConsoleColors {
    // Códigos ANSI para colores
    public static final String RESET = "\u001B[0m";
    public static final String WHITE = "\u001B[37m";
    public static final String BLUE = "\u001B[34m";
}

--------------------------------------------------

Main.java:
----------
import java.util.Map;
import java.util.Scanner;

public class Main {
    // Códigos ANSI para colores
    private static final String RESET = "\u001B[0m";
    private static final String WHITE = "\u001B[37m";
    private static final String BLUE = "\u001B[34m";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ConfigurationManager configManager = ConfigurationManager.getInstance();
        WelcomeScreen welcomeScreen = new WelcomeScreen();
        ConnectionSimulator connectionSimulator = new ConnectionSimulator();

        while (true) {
            // Obtener tema y color actual
            String theme = (String) configManager.getConfigValue("theme");
            String color = theme.equals("dark") ? BLUE : WHITE;

            // Aplicar color al menú
            System.out.print(color);
            System.out.println("=== MENÚ PRINCIPAL ===");
            System.out.println("1. Ver configuración actual");
            System.out.println("2. Cambiar configuración");
            System.out.println("3. Ir al panel de bienvenida");
            System.out.println("4. Ejecutar simulador de conexiones");
            System.out.println("5. Salir del sistema");
            System.out.print("Seleccione una opción: ");
            System.out.print(RESET); // Resetear color después del menú

            int option = scanner.nextInt();
            scanner.nextLine(); // Consumir el salto de línea

            // Resetear color si hay errores
            System.out.print(color);

            switch (option) {
                case 1:
                    showCurrentConfig(configManager);
                    break;
                case 2:
                    changeConfiguration(configManager, scanner);
                    break;
                case 3:
                    welcomeScreen.display();
                    break;
                case 4:
                    connectionSimulator.runSimulation();
                    break;
                case 5:
                    System.out.println("Saliendo del sistema...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Opción no válida. Intente de nuevo.");
            }
            System.out.print(RESET); // Resetear color al final de cada opción
        }
    }

    private static void showCurrentConfig(ConfigurationManager configManager) {
        String theme = (String) configManager.getConfigValue("theme");
        String color = theme.equals("dark") ? BLUE : WHITE;

        System.out.print(color);
        System.out.println("\n=== CONFIGURACIÓN ACTUAL ===");
        Map<String, Object> config = configManager.getAllConfig();
        for (Map.Entry<String, Object> entry : config.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
        System.out.println("===========================\n");
        System.out.print(RESET);
    }

    private static void changeConfiguration(ConfigurationManager configManager, Scanner scanner) {
        String theme = (String) configManager.getConfigValue("theme");
        String color = theme.equals("dark") ? BLUE : WHITE;

        System.out.print(color);
        System.out.println("\n=== CAMBIAR CONFIGURACIÓN ===");
        System.out.println("Parámetros disponibles:");
        System.out.println("1. defaultCurrency (CRC, USD)");
        System.out.println("2. timeFormat (24H o AM/PM)");
        System.out.println("3. maxConnections (número)");
        System.out.println("4. language (ES, EN)");
        System.out.println("5. autoSaveInterval (minutos, segundos)");
        System.out.println("6. enableLogs (true/false)");
        System.out.println("7. theme (light/dark)");
        System.out.println("8. region (LATAM, Asia, África, Europa, Oceanía)");
        System.out.println("9. backupEnabled (true/false)");
        System.out.println("10. backupDirectory (ruta)");
        System.out.print("Seleccione el parámetro a modificar (1-10): ");
        System.out.print(RESET);

        int paramOption = scanner.nextInt();
        scanner.nextLine(); // Consumir el salto de línea

        String key;
        Object value;
        Object oldValue = configManager.getConfigValue(getKeyFromOption(paramOption));

        System.out.print(color); // Aplicar color a la entrada de datos

        switch (paramOption) {
            case 1:
                key = "defaultCurrency";
                System.out.print("Nueva moneda (CRC, USD): ");
                value = scanner.nextLine().toUpperCase();

                if (!value.equals(oldValue)) {
                    if (value.equals("CRC") || value.equals("USD")) {
                        System.out.print("Digite el valor que desea transformar: ");
                        double amount = scanner.nextDouble();
                        scanner.nextLine(); // Limpiar buffer

                        double convertedAmount;
                        if (oldValue.equals("USD") && value.equals("CRC")) {
                            convertedAmount = amount * 505.17;
                            System.out.printf(">> Conversión: USD %.2f → CRC %.2f\n", amount, convertedAmount);
                        } else if (oldValue.equals("CRC") && value.equals("USD")) {
                            convertedAmount = amount / 505.17;
                            System.out.printf(">> Conversión: CRC %.2f → USD %.2f\n", amount, convertedAmount);
                        }
                    }
                }
                break;
            case 2:
                key = "timeFormat";
                System.out.print("Nuevo formato (24H o AM/PM): ");
                value = scanner.nextLine();
                break;
            case 3:
                key = "maxConnections";
                System.out.print("Nuevo máximo de conexiones: ");
                value = scanner.nextInt();
                scanner.nextLine();
                break;
            case 4:
                key = "language";
                System.out.print("Nuevo idioma (ES, EN): ");
                value = scanner.nextLine();
                break;
            case 5:
                key = "autoSaveInterval";
                System.out.print("Nuevo intervalo (minutos, segundos): ");
                value = scanner.nextInt();
                scanner.nextLine();
                break;
            case 6:
                key = "enableLogs";
                System.out.print("Activar logs (true/false): ");
                value = scanner.nextBoolean();
                scanner.nextLine();
                break;
            case 7:
                key = "theme";
                System.out.print("Nuevo tema (light/dark): ");
                value = scanner.nextLine();
                break;
            case 8:
                key = "region";
                System.out.print("Nueva región (LATAM, Asia, África, Europa, Oceanía): ");
                value = scanner.nextLine();
                break;
            case 9:
                key = "backupEnabled";
                System.out.print("Activar respaldos (true/false): ");
                value = scanner.nextBoolean();
                scanner.nextLine();
                break;
            case 10:
                key = "backupDirectory";
                System.out.print("Nueva ruta de respaldo: ");
                value = scanner.nextLine();
                break;
            default:
                System.out.println("Opción no válida.");
                return;
        }

        // Actualizar configuración y mostrar mensaje
        configManager.setConfigValue(key, value);
        System.out.printf(">> Parámetro '%s' cambiado de '%s' a '%s'.\n", key, oldValue, value);
        System.out.println("Configuración actualizada con éxito.\n");
        System.out.print(RESET);
    }

    private static String getKeyFromOption(int option) {
        switch (option) {
            case 1: return "defaultCurrency";
            case 2: return "timeFormat";
            case 3: return "maxConnections";
            case 4: return "language";
            case 5: return "autoSaveInterval";
            case 6: return "enableLogs";
            case 7: return "theme";
            case 8: return "region";
            case 9: return "backupEnabled";
            case 10: return "backupDirectory";
            default: return "";
        }
    }
}

--------------------------------------------------

WelcomeScreen.java:
-------------------
import java.text.SimpleDateFormat;
import java.util.Date;

public class WelcomeScreen {
    private final ConfigurationManager configManager;

    public WelcomeScreen() {
        this.configManager = ConfigurationManager.getInstance();
    }

    public void display() {
        // Obtener tema actual
        String theme = (String) configManager.getConfigValue("theme");
        String color = theme.equals("dark") ? ConsoleColors.BLUE : ConsoleColors.WHITE;

        // Aplicar color al texto
        System.out.print(color); // Cambia el color aquí

        // Resto del código (sin cambios)
        String language = (String) configManager.getConfigValue("language");
        String timeFormat = (String) configManager.getConfigValue("timeFormat");
        String welcomeMessage = language.equals("ES") ?
                "¡Bienvenido al sistema!" : "Welcome to the system!";
        String timePattern = timeFormat.equals("24H") ? "HH:mm:ss" : "hh:mm:ss a";
        String currentTime = new SimpleDateFormat(timePattern).format(new Date());

        System.out.println("\n=== PANEL DE BIENVENIDA ===");
        System.out.println(welcomeMessage);
        System.out.println("Hora actual: " + currentTime);
        System.out.println("Tema: " + theme);
        System.out.println("==========================\n");

        // Resetear color al final
        System.out.print(ConsoleColors.RESET);
    }
}

--------------------------------------------------

